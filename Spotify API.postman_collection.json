{
	"info": {
		"_postman_id": "8d557369-e1ec-42fd-a5a9-b3bb239bc113",
		"name": "Spotify API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17553574"
	},
	"item": [
		{
			"name": "AUTHENTIFICATION",
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic MGRhZDhjMGFkOTEwNGFlNDlkNjgxZjE2MDYzZjYzMTY6YTYwMmVhOTI5NWEyNDY0ZWI1ZTZhODE3NGIxNjUwODY=",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate Token",
			"request": {
				"auth": {
					"type": "bearer"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic MGRhZDhjMGFkOTEwNGFlNDlkNjgxZjE2MDYzZjYzMTY6YTYwMmVhOTI5NWEyNDY0ZWI1ZTZhODE3NGIxNjUwODY=",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "grant_type",
							"value": "client_credentials",
							"type": "text"
						},
						{
							"key": "client_id",
							"value": "d59e0362b46b494e9c753c7824457df5",
							"type": "text"
						},
						{
							"key": "client_secret",
							"value": "ba4ced38d26a46e0aa88d573ae34e0e2",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "authorization_code",
							"type": "text"
						},
						{
							"key": "code",
							"value": "AQDptXwQiS3kU2uA_FNzOmWIYULuiWoSFogLZpY3UzRb79YtSJYc38-RA_sLeD-WRLqmmF6A6DR6UqResMoQwFSb7gnIrLLBrmyokO7EdfjgGdX2Sf8EWai3_kvI2gQhHiDIPLAb8F3CttVCMJ7NaU53O7swPd3oD28Bi_f4dyoYh4Cc7EV2IQCwuMyfoH2YL8Y6PBiF-vuh7DifP9FSyLQgzxJ31TE0R2gv1fhPQNoXHPWHe-Ul8BefM-F8Grbs1s4r4blgUai2w5NVao5YsZWLHa_0oG-I39hoODyxypu6vVav82l8uS15RUfjV8301BuOIkMPd9AokS4BwG9mCuSooqhQmqtTUcjOv9XSNZmA2IgNgMtC5UBnaUK4KdDKFKBOvwyDA8_GtN0TBDOQJeTByMkzTZ1KozlLTE3n2QfHPApL1_a36wP5UbWMhTs7BX72lNNhIHxqeRKenk9PYbaLMLVoOOEk_ZmTtKJqa1nx1OqN2W192fyKQ7Oc3AM79vDyCcbj2icKyriwDWgHzEFvep720mZqWi0xYTLG0p2Qekpoq9fwaNMXc5QnyNWcZB_2Iv_XLpd2u-jYbcvH52MPmB2QsbS6MffUQVnOCfIpvmrMqWX2agjhxtxU4TbGH9fL83SEEdYRXnAcFYnm6D_WU18Acms60vmo9fkHwnA",
							"type": "text"
						},
						{
							"key": "redirect_uri",
							"value": "https://Sporify_testing",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://accounts.spotify.com/api/token",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"api",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Generate code",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://accounts.spotify.com/authorize?&client_id=d59e0362b46b494e9c753c7824457df5&response_type=code&redirect_uri=https%3A%2F%2FSporify_testing&scope=ugc-image-upload  user-read-playback-state user-modify-playback-state app-remote-control streaming playlist-read-private playlist-read-collaborative playlist-modify-private playlist-modify-public user-follow-modify user-follow-read user-read-playback-position user-top-read user-read-recently-played user-library-modify user-library-read user-read-email user-read-private ",
					"protocol": "https",
					"host": [
						"accounts",
						"spotify",
						"com"
					],
					"path": [
						"authorize"
					],
					"query": [
						{
							"key": "",
							"value": null
						},
						{
							"key": "client_id",
							"value": "d59e0362b46b494e9c753c7824457df5"
						},
						{
							"key": "response_type",
							"value": "code"
						},
						{
							"key": "redirect_uri",
							"value": "https%3A%2F%2FSporify_testing"
						},
						{
							"key": "scope",
							"value": "ugc-image-upload  user-read-playback-state user-modify-playback-state app-remote-control streaming playlist-read-private playlist-read-collaborative playlist-modify-private playlist-modify-public user-follow-modify user-follow-read user-read-playback-position user-top-read user-read-recently-played user-library-modify user-library-read user-read-email user-read-private "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Album",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validam statul codul 200 care indica OK\r",
							"pm.test(\"Verify that the request returns status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verificam ca timpul de respuns este mai mic de 400ms\r",
							"pm.test(\"Verify that the request runs in less than 400ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
							"});\r",
							"\r",
							"//Verificam ca raspunsul metodei este in format JSON\r",
							"pm.test(\"Răspunsul este în format JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Verificam faptul ca  album_type are valoare album\r",
							"pm.test(\"Verify album details contains 'album'\", function () {\r",
							"    //pm.response.json().album_type == \"album\"; //prima optiune de testare\r",
							"   //pm.expect(pm.response.json().album_type).to.equal(\"album\");  //a doua optiune de testare\r",
							"   //pm.expect(pm.response.json()[\"album_type\"]) == \"album\";  //a treia varianta de testare \r",
							"   pm.expect(pm.response.json()[\"album_type\"]).to.eql(\"album\") // a patra optiune de testare\r",
							"   // var jsonData = pm.response.json(); //a cincea optiune de testare\r",
							"   // pm.expect(jsonData).to.have.property('album_type', 'album');\r",
							"});\r",
							"\r",
							"//Verificam ca numele artistului este Disturbed\r",
							"pm.test(\"Verify that the artist name is Disturbed\", function(){\r",
							"    pm.expect(pm.response.json()[\"artists\"][0][\"name\"]) == \"Disturbed\";\r",
							"});\r",
							"\r",
							"//Verificam ca numele primei piese este corect\r",
							"pm.test(\"Verify that the first name track on the album is The Eye of the Storm\", function(){\r",
							"    pm.expect(pm.response.json()[\"tracks\"][\"items\"][1][\"artists\"][0][\"name\"]) == \"The Eye of the Storm\";\r",
							"});\r",
							"\r",
							"//Verificam ca toate piesele conting numele corect al albumului\r",
							"pm.test(\"Verify that all the tracks have corect album name\", function(){\r",
							"    album_ok = true;\r",
							"    for (var i = 0; i<= pm.response.json()[\"tracks\"][\"items\"].lenght; i++){\r",
							"        if ( pm.response.json()[\"tracks\"][\"items\"][\"artists\"][0][\"name\"] != \"Disturbed\" ){\r",
							"            album_ok = false;\r",
							"        }\r",
							"    }\r",
							"    pm.expect(pm.response.json()[\"artists\"][0][\"name\"]) == \"Disturbed\";\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/v1/albums/3qFQ4XNQ15alZrAaj5oGJK",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"albums",
						"3qFQ4XNQ15alZrAaj5oGJK"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Playlist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validam statul codul 200 care indica OK\r",
							"pm.test(\"Verify that the request returns status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verificam ca timpul de respuns este mai mic de 600ms\r",
							"pm.test(\"Verify that the request runs in less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"//Verificam ca raspunsul metodei este in format JSON\r",
							"pm.test(\"Răspunsul este în format JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Verificam ca numele playlistului este \"API Playlist Actualizat\"\r",
							"pm.test(\"Verify that the playlist name is API Playlist Actualizat\", function () {\r",
							"    pm.expect(pm.response.json()[\"name\"]).to.eql(\"API Playlist Actualizat\");\r",
							"});\r",
							"\r",
							"//Verificam daca playlistul este public\r",
							"pm.test(\"Verify that the playlist is public\", function(){\r",
							"    pm.expect(pm.response.json().public).to.be.true;\r",
							"});\r",
							"\r",
							"//Verificam daca numele primei piese este \"Immoralized\"\r",
							"pm.test(\"Verify the name of the first track\", function(){\r",
							"    pm.response.json()[\"tracks\"][\"items\"][0][\"track\"][\"album\"][\"name\"] == \"Immoralized\";\r",
							"});\r",
							"\r",
							"//Verificam daca toate piesele sunt disponibile pentru piata din Romania\r",
							"pm.test(\"Verify that all the tracks are available in the Romanian market\", function (){\r",
							"    for(var i = 0; i < pm.response.json()[\"tracks\"][\"items\"].length; i++ )\r",
							"    {\r",
							"        var track_are_available_on_romanian_market = false;\r",
							"        for(var j = 0; j < pm.response.json()[\"tracks\"][\"items\"][i][\"track\"][\"available_markets\"].length; j++ )\r",
							"        {\r",
							"            if (pm.response.json()[\"tracks\"][\"items\"][i][\"track\"][\"available_markets\"][j] === \"RO\")\r",
							"            {\r",
							"                track_are_available_on_romanian_market = true;\r",
							"                break;\r",
							"            }\r",
							"        }\r",
							"        pm.expect(track_are_available_on_romanian_market).to.be.true;\r",
							"    }\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/v1/playlists/60G3qW2PPwIEV4WsExhkoH",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"playlists",
						"60G3qW2PPwIEV4WsExhkoH"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Change Playlist Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Validam statul codul 200 care indica OK\r",
							"pm.test(\"Verify that the request returns status code 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verificam ca timpul de respuns este mai mic de 600ms\r",
							"pm.test(\"Verify that the request runs in less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"//Verificam ca raspunsul metodei este in format JSON\r",
							"pm.test(\"Răspunsul este în format JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"//Verificam faptul ca playlistul se numeste API Playlist Actualizat\r",
							"pm.test(\"Verify that the playlist name is API Playlist Actualizat\", function () {\r",
							"      pm.expect(pm.response.json()[\"name\"]).to.eql(\"API Playlist Actualizat\") \r",
							"});\r",
							"\r",
							"//Verificam daca playlistul este public\r",
							"pm.test(\"Verify that the playlist is public\", function(){\r",
							"    pm.expect(pm.response.json().public).to.be.true;\r",
							"});\r",
							"\r",
							"//Verificam daca numele primei melodi este Immoralized\r",
							"pm.test(\"Verify the name of the first track\", function(){\r",
							"    pm.response.json()[\"tracks\"][\"items\"][0][\"track\"][\"album\"][\"name\"] == \"Immoralized\";\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"API Playlist Actualizat\",\r\n    \"description\": \"Playlist for testing API 2\",\r\n    \"public\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/v1/playlists/60G3qW2PPwIEV4WsExhkoH",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"playlists",
						"60G3qW2PPwIEV4WsExhkoH"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Add Items to Playlist",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"uris\": [\r\n        \"spotify:track:1301WleyT98MSxVHPZCA6M\" \r\n    ],\r\n    \"position\": 4\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/v1/playlists/60G3qW2PPwIEV4WsExhkoH/tracks",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"playlists",
						"60G3qW2PPwIEV4WsExhkoH",
						"tracks"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE Remove Playlist Items",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"tracks\": [\r\n        {\r\n            \"uri\": \"spotify:track:5tz5QsHPkv69T1scq2utZZ\"\r\n        }\r\n    ],\r\n    \"snapshot_id\": \"AAAADBVFQir0THMUOXIEISVZYJ7Q/PU3\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/v1/playlists/60G3qW2PPwIEV4WsExhkoH/tracks",
					"host": [
						"{{host}}"
					],
					"path": [
						"v1",
						"playlists",
						"60G3qW2PPwIEV4WsExhkoH",
						"tracks"
					]
				}
			},
			"response": []
		}
	]
}